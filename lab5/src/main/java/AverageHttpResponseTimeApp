public class AverageHttpResponseTimeApp {
    private static final String QUERY_PARAMETER_URL = "testUrl";
    private static final String QUERY_PARAMETER_COUNT = "count";

    private static final int TIMEOUT_MILLISEC = 5000;
    private static final int MAP_PARALLELISM_FOR_EACH_GET_REQUEST = 1;
    private static final int PORT = 8080;

    public static void main(String[] args) throws IOException {
        System.out.println("start");
        ActorSystem system = ActorSystem.create("routes");
        ActorRef actor = system.actorOf(Props.create(ActorCache.class));

        final Http http = Http.get(system);
        final ActorMaterialializer materialializer = ActorMaterializer.create(system);
        final Flow<HttpRequest, HttpResponse, NotUsed> routeFlow = flowHttpRequest(materialializer,actor);
        final ComlpetionStage<ServerBinding> binding = http.bindAndHandle(
                routeFlow,
                ConnectHttp.toHost("localhost", PORT),
                materialializer
        );

        System.out.println("Server online at http://localhost:" + PORT +"/\nPress RETURN to stop...");
        System.in.read();
        binding
                .thenCompose(ServerBinding::unbind)
                .thenAccept(unbound -> system.terminate());
    }

    private static Flow<HttpRequest, HttpResponse, NotUsed> flowHttpRequest(ActorMaterializer materializer, ActorRef actor) {
        return Flow.of(HttpRequest.class).map(req -> {
                                              Query query = req.getUri().query();
                                              String url = query.get(QUERY_PARAMETER_URL).get();
                                              int count = Integer.parseInt(query.get(QUERY_PARAMETER_COUNT).get());
                                              return new Pair<>(url,count);
        })
        .mapAsync(MAP_PARALLELISM_FOR_EACH_GET_REQUEST, req -> Patterns.ask(
                                        actor,
                                        new MessageGetResult(req.first()),
                                        java.time.Duration.ofMillis(TIMEOUT_MILLISEC))
                                                                        .thenCompose( res -> {
                                                                            return CompletableFuture.completedFuture(new Pair<>(req.first()), ((Optional<Long> res).get()));
                                                                        } esle {
                                                                            Sink<Integer, CompletionStage<Long>> fold = Sink.fold(0L, (Function2<Long, Integer, Long>) Long::sum);
                                                                            Sink<Pair<String, Integer>, CompletionStage<Long> sink = Flow>
        }
                                                                        )
        )
    }
}